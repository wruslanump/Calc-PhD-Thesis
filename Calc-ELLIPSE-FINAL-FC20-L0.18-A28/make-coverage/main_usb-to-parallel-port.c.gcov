        -:    0:Source:/home/wruslan/workspaces-gnat/gnatstudio-c/gnat_c_cnc-04/src/parallel_usb/main_usb-to-parallel-port.c
        -:    1://============================================================================
        -:    2:// Name        : main_usb-to-parallel-port.c
        -:    3:// Author      : wruslan
        -:    4:// Version     :
        -:    5:// Copyright   : Busmillah Hirrahma Nirrahim
        -:    6:// Description : Hello World in C++, Ansi-style
        -:    7://============================================================================
        -:    8:/*
        -:    9:REFERENCE: https://www.howtoforge.com/tutorial/accessing-parallel-ports-on-linux/
        -:   10:
        -:   11:Accessing Physical Ports on Linux
        -:   12:
        -:   13:Because the port hardware on a PC is controlled directly by the Linux kernel,
        -:   14:we must access certain headers related to the parallel port bus. The GCC compiler
        -:   15:can access these headers, always bearing in mind that the user must have root
        -:   16:privileges to avoid access errors. These headers are:
        -:   17:
        -:   18:(1) stdio.h: The "standard input-output header" (standard header I/O) is the
        -:   19:header file that contains the macro definitions, constants, function declarations
        -:   20:in the standard library of the C programming language to perform operations,
        -:   21:standard input and output, as well as the definition of types necessary for such
        -:   22:operations. For compatibility reasons, the programming language C ++ (C derivative)
        -:   23:also has its own implementation of these functions, which are declared with
        -:   24:<cstdio> file header. The function I have to use is fprintf which allows to print
        -:   25:on a terminal window if there is any error.
        -:   26:
        -:   27:(2) stdlib.h: Is the header file for the standard library of the general-purpose
        -:   28:programming language C. It contains the C function prototypes for dynamic memory
        -:   29:management, process control and other. It supports C ++ where it is known as
        -:   30:<cstdlib>. The function I will use is exit when we get an error.
        -:   31:
        -:   32:(3) unistd.h:  Header file that provides access to the POSIX operating system API.
        -:   33:On Unix-like systems, the interface defined by unistd.h is typically made up largely
        -:   34:of system call wrapper functions such as fork, pipe and I/O primitives (read, write,
        -:   35:close, etc.).
        -:   36:
        -:   37:(4) sys/io.h: This family of functions is used to do low-level port input and output.
        -:   38:The out* functions do port output, the in* functions do port input; the b-suffix functions
        -:   39:are byte-width and the w-suffix functions word-width; the _p-suffix functions pause
        -:   40:until the I/O completes. Of this family function I will use outb.
        -:   41:*/
        -:   42:
        -:   43:#include <stdio.h>
        -:   44:#include <stdlib.h>
        -:   45:#include <unistd.h>
        -:   46:#include <sys/io.h>
        -:   47:
        -:   48:// WRY Date-Time stamp nanosecond display
        -:   49:#include "common/c_dtstamp.h"
        -:   50:
        -:   51:// WRY parallel port codes
        -:   52:#include "parallel_usb/usb_parallel_port.h"
        -:   53:
        -:   54:// ========================================================
    #####:   55:int main(int argc, char* argv[]){
        -:   56:// ========================================================
    #####:   57:WRY_starting_salutation();
        -:   58:
    #####:   59:	printf("=============================================================\n");
    #####:   60:	start_timer(1);
    #####:   61:	DTStamp();
    #####:   62:	printf("CHECK 1: Check environment, date, time and clock.\n");
    #####:   63:	display_date_only();
    #####:   64:	current_working_directory();
    #####:   65:	DTStamp(); printf("Current runfile  : %s \n", argv[0]);
    #####:   66:	display_resolution_date_time();
    #####:   67:	stop_timer(1);
        -:   68:
    #####:   69:	printf("=============================================================\n");
    #####:   70:	start_timer(2);
    #####:   71:	DTStamp();
    #####:   72:	printf("EXECUTE: Write via usb to parallel port using PL2305 chip on cable\n");
    #####:   73:	test_writeusb_to_parport();
    #####:   74:	stop_timer(2);
        -:   75:
    #####:   76:total_program_duration();
    #####:   77:WRY_ending_salutation();
    #####:   78:return (0);
        -:   79:}
        -:   80:// ========================================================
        -:   81:/*
        -:   82:wruslan@HP-EliteBook-8470p-Ub1804:~/apps/cpp-eclipse-wks/usb-to-parallel-port/Debug$ sudo ./usb-to-parallel-port
        -:   83:2020-04-15 17:20:35.553079232 	Starting in main(), Bismillah 3 times WRY.
        -:   84:2020-04-15 17:20:35.553113644 	Program started.
        -:   85:
        -:   86:=============================================================
        -:   87:2020-04-15 17:20:35.553134018 	Timer 1 start.
        -:   88:2020-04-15 17:20:35.553151144 	CHECK 1: Check environment, date, time and clock.
        -:   89:2020-04-15 17:20:35.553204631 	Current date and time: Wed Apr 15, 2020 17:20:35
        -:   90:2020-04-15 17:20:35.553223357 	Current directory: /home/wruslan/apps/cpp-eclipse-wks/usb-to-parallel-port/Debug
        -:   91:2020-04-15 17:20:35.553237035 	Current runfile  : ./usb-to-parallel-port
        -:   92:2020-04-15 17:20:35.553264870 	Clock time resolution 	= 1 nanoseconds
        -:   93:2020-04-15 17:20:35.553270084 	Timer 1 stop. Duration (timer start-to-stop) = 0.000140646 seconds.
        -:   94:
        -:   95:=============================================================
        -:   96:2020-04-15 17:20:35.553282722 	Timer 2 start.
        -:   97:2020-04-15 17:20:35.553290825 	EXECUTE: Write via usb to parallel port using PL2305 chip on cable
        -:   98:2020-04-15 17:20:35.553299061 	STARTED  test_writeusb_to_parport(void).
        -:   99:2020-04-15 17:20:35.553331400 	SUCCESS: open DEVICE_USB_TO_PAR = /dev/usb/lp0/ return fd_usb_parport = 3
        -:  100:2020-04-15 17:20:35.553373061 	SUCCESS: write(fd_usb_parport, (const void *)data_uchar, 1) = R
        -:  101:2020-04-15 17:20:35.553408759 	SUCCESS: write(fd_usb_parport, (const void *)data_short, 1) = 165
        -:  102:2020-04-15 17:20:35.553418382 	SUCCESS: write(fd_usb_parport, (const void *)data_long,  1) = 66577789
        -:  103:2020-04-15 17:20:35.553427937 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 0 	char= B bin= 01000010 hex= 0x42 int= 66
        -:  104:2020-04-15 17:20:35.553438343 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 1 	char= i bin= 01101001 hex= 0x69 int= 105
        -:  105:2020-04-15 17:20:35.553446091 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 2 	char= s bin= 01110011 hex= 0x73 int= 115
        -:  106:2020-04-15 17:20:35.553453454 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 3 	char= m bin= 01101101 hex= 0x6d int= 109
        -:  107:2020-04-15 17:20:35.553460819 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 4 	char= i bin= 01101001 hex= 0x69 int= 105
        -:  108:2020-04-15 17:20:35.553468392 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 5 	char= l bin= 01101100 hex= 0x6c int= 108
        -:  109:2020-04-15 17:20:35.553475953 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 6 	char= l bin= 01101100 hex= 0x6c int= 108
        -:  110:2020-04-15 17:20:35.553483394 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 7 	char= a bin= 01100001 hex= 0x61 int= 97
        -:  111:2020-04-15 17:20:35.553490855 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 8 	char= h bin= 01101000 hex= 0x68 int= 104
        -:  112:2020-04-15 17:20:35.553499829 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 9 	char=   bin= 00100000 hex= 0x20 int= 32
        -:  113:2020-04-15 17:20:35.553507702 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 10 	char= W bin= 01010111 hex= 0x57 int= 87
        -:  114:2020-04-15 17:20:35.553515137 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 11 	char= R bin= 01010010 hex= 0x52 int= 82
        -:  115:2020-04-15 17:20:35.553522606 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 12 	char= Y bin= 01011001 hex= 0x59 int= 89
        -:  116:2020-04-15 17:20:35.553529984 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 13 	char=   bin= 00100000 hex= 0x20 int= 32
        -:  117:2020-04-15 17:20:35.553537395 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 14 	char= a bin= 01100001 hex= 0x61 int= 97
        -:  118:2020-04-15 17:20:35.553544838 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 15 	char= n bin= 01101110 hex= 0x6e int= 110
        -:  119:2020-04-15 17:20:35.553552261 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 16 	char= d bin= 01100100 hex= 0x64 int= 100
        -:  120:2020-04-15 17:20:35.553559632 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 17 	char=   bin= 00100000 hex= 0x20 int= 32
        -:  121:2020-04-15 17:20:35.553567088 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 18 	char= A bin= 01000001 hex= 0x41 int= 65
        -:  122:2020-04-15 17:20:35.553574457 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 19 	char= l bin= 01101100 hex= 0x6c int= 108
        -:  123:2020-04-15 17:20:35.553581873 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 20 	char= h bin= 01101000 hex= 0x68 int= 104
        -:  124:2020-04-15 17:20:35.553589309 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 21 	char= a bin= 01100001 hex= 0x61 int= 97
        -:  125:2020-04-15 17:20:35.553596710 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 22 	char= m bin= 01101101 hex= 0x6d int= 109
        -:  126:2020-04-15 17:20:35.553604075 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 23 	char= d bin= 01100100 hex= 0x64 int= 100
        -:  127:2020-04-15 17:20:35.553611538 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 24 	char= u bin= 01110101 hex= 0x75 int= 117
        -:  128:2020-04-15 17:20:35.553618902 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 25 	char= l bin= 01101100 hex= 0x6c int= 108
        -:  129:2020-04-15 17:20:35.553626266 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 26 	char= i bin= 01101001 hex= 0x69 int= 105
        -:  130:2020-04-15 17:20:35.553633725 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 27 	char= l bin= 01101100 hex= 0x6c int= 108
        -:  131:2020-04-15 17:20:35.553641086 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 28 	char= l bin= 01101100 hex= 0x6c int= 108
        -:  132:2020-04-15 17:20:35.553648455 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 29 	char= a bin= 01100001 hex= 0x61 int= 97
        -:  133:2020-04-15 17:20:35.553655887 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 30 	char= h bin= 01101000 hex= 0x68 int= 104
        -:  134:2020-04-15 17:20:35.553663297 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 31 	char=   bin= 00100000 hex= 0x20 int= 32
        -:  135:2020-04-15 17:20:35.553670748 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 32 	char= W bin= 01010111 hex= 0x57 int= 87
        -:  136:2020-04-15 17:20:35.553678232 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 33 	char= R bin= 01010010 hex= 0x52 int= 82
        -:  137:2020-04-15 17:20:35.553685603 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 34 	char= Y bin= 01011001 hex= 0x59 int= 89
        -:  138:2020-04-15 17:20:35.553693041 	SUCCESS: write(fd_usb_parport, (const void *)(long)TheChar[i],  1) i = 35 	char= ! bin= 00100001 hex= 0x21 int= 33
        -:  139:2020-04-15 17:20:35.556972969 	FINISHED test_writeusb_to_parport(void).
        -:  140:2020-04-15 17:20:35.556982628 	Timer 2 stop. Duration (timer start-to-stop) = 0.003700299 seconds.
        -:  141:
        -:  142:2020-04-15 17:20:35.556995158 	Total program run duration   = 0.004025134 seconds.
        -:  143:
        -:  144:2020-04-15 17:20:35.557006488 	Program ended.
        -:  145:2020-04-15 17:20:35.557014540 	Ending in main(), Alhamdulillah 3 times WRY.
        -:  146:wruslan@HP-EliteBook-8470p-Ub1804:~/apps/cpp-eclipse-wks/usb-to-parallel-port/Debug$
        -:  147:
        -:  148:
        -:  149:
        -:  150:*/
        -:  151:// ========================================================
